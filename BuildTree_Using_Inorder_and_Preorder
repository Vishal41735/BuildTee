#include<iostream>
#include<queue>
using namespace std;

class Node{
public:
int data;
Node* left;
Node* right;
Node(int data){
  this->data = data;
  this->left = NULL;
  this->right = NULL;
}
};

int findPosition(int arr[] , int n , int element){
  for(int i = 0; i<n; i++){
    if(arr[i] == element){
      return i;
    }
  }
  return -1;
  
}

 Node* BuildTreefromPreOrderInorder(int  inorder[] , int preorder[] , int size , int &preIndex ,  int inorderstart , int inorderend){

   // Base case 
   if(preIndex >= size || inorderstart > inorderend){
     return NULL;
   }

   int element = preorder[preIndex++];
   Node* root = new Node(element);

   int position = findPosition(inorder , size , element);

   // Now ab tumhe root ke left me tree ko build krna hai 

   root->left = BuildTreefromPreOrderInorder(inorder , preorder , size  , preIndex , inorderstart ,  position-1);

   root->right = BuildTreefromPreOrderInorder(inorder , preorder , size  , preIndex ,position+1,   inorderend );



   return root;
    
 }

void levelOrderTraversal(Node* root){
  queue<Node*> q;
  q.push(root);
  q.push(NULL);

  while(!q.empty()){
    Node* temp = q.front();
    q.pop();

    if(temp == NULL){
      cout<<endl;

      if(!q.empty()){
        q.push(NULL);
      }
    }
    else{
      cout<<temp->data<<" ";
      if(temp->left){
        q.push(temp->left);
      }
      if(temp->right){
        q.push(temp->right);
      }
    }
    
    
  }
}



int main(){
  int inorder[] = {40,20,50,10,60,30,70};
  int preorder[] = {10,20,40,50,30,60,70};
  int size = 7;
  int preIndex = 0;
  int inorderstart = 0;
  int inorderend = size-1;

  Node* root = BuildTreefromPreOrderInorder(inorder, preorder , size  , preIndex , inorderstart , inorderend);

  cout<<"Printing level order traversal "<<endl;

  levelOrderTraversal(root);

  
  
  
  
    
  
}
